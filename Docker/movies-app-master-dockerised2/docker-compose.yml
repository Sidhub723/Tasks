version : "35"
services : 
  frontclient:
    build: ./client
    stdin_open: true
    restart: always
    depends_on:
      -server
    #image: "name"
    ports:
      - "3000:3000"
    networks:
      - "internalntwrk"

  server:
    #restart: always
    build: ./server
    #image: "name of the api server image"
    ports:
      - "3000:3000"
    networks:
      - "internalntwrk"
    #environment:
    #  MONGO_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD }@mongodb

  mongodb:
    #image: "database"
    image: mongo:4.2.0
    ports:
      - "27017:27017"
    networks:
      - "internalntwrk"
    #environment:
    #  MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
    #  MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      -mongo-data:/data/db

networks:
  internalntwrk:
    driver: bridge

volumes:
  mongo-data:
    driver: local
    

# We choose to run the latest version of docker compose - version 3
# Each of the different docker containers we want to create when we run docker compose is called a service
# Ehe build command will build the image of the container
# Ee specify the required ports for each container. The freshly created docker container will listen on its port 3000, and any data coming to port 3000 on localhost will be redirected to it
# Different services are discoverable at a hostname which is the same as the container name. The mongodb index.js file tells us that it connects to a localhost name of "mongodb" and that is what we wil name our Mongo service
# /data/db is the default location where mongodb stores its data







